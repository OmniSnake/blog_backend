import asyncio
import os
import sys
from sqlalchemy import text

sys.path.append(os.path.dirname(os.path.dirname(__file__)))

from app.core.database import db_manager


async def seed_database():
    """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""

    try:
        with open('seed_test_data.sql', 'r', encoding='utf-8') as f:
            sql_content = f.read()

        queries = []
        current_query = []

        for line in sql_content.split('\n'):
            line = line.strip()
            if not line or line.startswith('--'):
                continue

            current_query.append(line)

            if line.endswith(';'):
                full_query = ' '.join(current_query)
                queries.append(full_query)
                current_query = []

        if current_query:
            full_query = ' '.join(current_query)
            queries.append(full_query)

        print(f"–ù–∞–π–¥–µ–Ω–æ {len(queries)} –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")

        for i, query in enumerate(queries, 1):
            try:
                async with db_manager.engine.begin() as conn:
                    await conn.execute(text(query))
                    print(f"‚úÖ –ó–∞–ø—Ä–æ—Å {i}/{len(queries)} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ {i}:")
                print(f"   –ó–∞–ø—Ä–æ—Å: {query[:100]}...")
                print(f"   –û—à–∏–±–∫–∞: {e}")

        print("\nüéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏!")

    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª seed_test_data.sql –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    asyncio.run(seed_database())